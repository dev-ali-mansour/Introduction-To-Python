# Recall list comprehensions
nums = [2 * num for num in range(10)]
print(nums)

print("=======================")

# Use () instead of [] to create a generator expression
nums = (2 * num for num in range(10))
print(nums)

print("=======================")

# Printing values from a generator
result = (num for num in range(6))
for num in result:
    print(num)

print("=======================")

# Lazy evaluation means that the values are generated on-the-fly, not stored in memory
result = (num for num in range(6))
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

print("=======================")

# Generators can handle large data sets without consuming too much memory
# nums = [num for num in range(10**1000000)] # Don't do this, it will crash your computer!
nums = (num for num in range(10 ** 1000000))  # This is fine, it uses a generator
print(next(nums))
print(next(nums))
print(next(nums))

print("=======================")

# Conditionals in generator expressions
even_nums = (num for num in range(10) if num % 2 == 0)
print(list(even_nums))

print("=======================")


# Build a generator function
def num_sequence(n):
    """Generate vales from 0 to n."""
    i = 0
    while i < n:
        yield i
        i += 1


result = num_sequence(5)
print(type(result))
print(list(result))

print("========================")

# Create a generator object that will produce values from 0 to 30. Assign the result to result and use num as the iterator variable in the generator expression.
# Print the first 5 values by using next() appropriately in print().
# Print the rest of the values by using a for loop to iterate over the generator object.

# Create generator object: result
result = (num for num in range(31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)

print("========================")

# ou are given a list of strings lannister and, using a generator expression, create a generator object that you will
# iterate over to print its values.

# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)

print("========================")

# In this exercise, you will create a generator function with a similar mechanism as the generator expression you
# defined in the previous exercise:

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']


# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)


# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)

print("========================")
